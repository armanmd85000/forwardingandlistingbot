import re
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode, MessageMediaType

# Bot Config
API_ID = 20219694
API_HASH = "29d9b3a01721ab452fcae79346769e29"
BOT_TOKEN = "7942215521:AAG5Zardlr7ULt2-yleqXeKjHKp4AQtVzd8"

class Config:
    OFFSET = 0
    PROCESSING = False
    EXTRACT_LIMIT = 100
    TARGET_CHAT = None

app = Client("link_modifier_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

def modify_only_caption_links(text: str, offset: int) -> str:
    """
    рд╕рд┐рд░реНрдл рдХреИрдкреНрд╢рди рдореЗрдВ рдореМрдЬреВрдж рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рд▓рд┐рдВрдХреНрд╕ рдХреЛ рдореЙрдбрд┐рдлрд╛рдИ рдХрд░реЗрдЧрд╛
    рдореАрдбрд┐рдпрд╛ рд╕реЛрд░реНрд╕ рд▓рд┐рдВрдХ рдХреЛ рдЫреЛрдбрд╝ рджреЗрдЧрд╛
    """
    if not text:
        return text

    def offset_applier(match):
        url = match.group(1)
        chat = match.group(2)
        msg_id = match.group(3)
        return f"{url}{chat}/{int(msg_id) + offset}"

    # рд╕рд┐рд░реНрдл t.me/c/... рдФрд░ t.me/username/... рд╡рд╛рд▓реЗ рд▓рд┐рдВрдХреНрд╕ рдХреЛ рдЯрд╛рд░рдЧреЗрдЯ рдХрд░реЗрдЧрд╛
    pattern = r'(https?://t\.me/(c/\d+|[\w-]+)/(\d+))'
    return re.sub(pattern, offset_applier, text)

async def process_single_message(client: Client, message: Message):
    try:
        # рдореАрдбрд┐рдпрд╛ рдлреЙрд░рд╡рд░реНрдб рдХрд░рдиреЗ рдХрд╛ рд▓реЙрдЬрд┐рдХ
        if message.media:
            if message.media == MessageMediaType.PHOTO:
                sent_msg = await client.send_photo(
                    Config.TARGET_CHAT,
                    message.photo.file_id,
                    caption=modify_only_caption_links(message.caption, Config.OFFSET),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif message.media == MessageMediaType.VIDEO:
                sent_msg = await client.send_video(
                    Config.TARGET_CHAT,
                    message.video.file_id,
                    caption=modify_only_caption_links(message.caption, Config.OFFSET),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                sent_msg = await client.send_document(
                    Config.TARGET_CHAT,
                    message.document.file_id,
                    caption=modify_only_caption_links(message.caption, Config.OFFSET),
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            sent_msg = await client.send_message(
                Config.TARGET_CHAT,
                modify_only_caption_links(message.text, Config.OFFSET),
                parse_mode=ParseMode.MARKDOWN
            )
        
        # рдбреАрдмрдЧрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рд▓реЙрдЧ
        debug_info = (
            f"тЬЕ Processed\n"
            f"Original ID: {message.id}\n"
            f"Original Link: {message.link}\n"
            f"Caption Links Modified: {Config.OFFSET}\n"
            f"New Message: {sent_msg.link}"
        )
        await client.send_message("me", debug_info)
        return True
        
    except Exception as e:
        error_msg = f"тЭМ Error in message {message.id}\nError: {str(e)}"
        await client.send_message("me", error_msg)
        return False

@app.on_message(filters.command(["addnumber", "lessnumber"]))
async def set_offset_cmd(client: Client, message: Message):
    try:
        amount = int(message.command[1])
        if message.command[0] == "addnumber":
            Config.OFFSET += amount
            action = "рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛"
        else:
            Config.OFFSET -= amount
            action = "рдШрдЯрд╛рдпрд╛ рдЧрдпрд╛"
        
        await message.reply(f"тЬЕ рдСрдлрд╕реЗрдЯ {action}: {amount}\nрдирдпрд╛ рдСрдлрд╕реЗрдЯ: {Config.OFFSET}")
    except:
        await message.reply("тЪая╕П рдЙрдкрдпреЛрдЧ: /addnumber 2 рдпрд╛ /lessnumber 3")

@app.on_message(filters.command("startbatch"))
async def start_batch(client: Client, message: Message):
    if Config.PROCESSING:
        return await message.reply("тЪая╕П рдкрд╣рд▓реЗ рд╕реЗ рдкреНрд░реЛрд╕реЗрд╕ рдЪрд▓ рд░рд╣рд╛ рд╣реИ")
    
    Config.PROCESSING = True
    args = message.text.split()
    
    if len(args) > 1:
        try:
            Config.EXTRACT_LIMIT = min(int(args[1]), 200)
        except:
            pass
    
    await message.reply(
        f"ЁЯФ╣ рдмреИрдЪ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рд╢реБрд░реВ\n"
        f"ЁЯУМ рд▓рд┐рдорд┐рдЯ: {Config.EXTRACT_LIMIT} рдореИрд╕реЗрдЬ\n"
        f"ЁЯФв рдСрдлрд╕реЗрдЯ: {Config.OFFSET}\n\n"
        f"рдЕрдм рдирд┐рдореНрди рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ:\n"
        f"`рдЯрд╛рд░рдЧреЗрдЯ_рдЪреИрдирд▓ @username\n"
        f"рд╕реЛрд░реНрд╕_рдкреЛрд╕реНрдЯ_рд▓рд┐рдВрдХ https://t.me/...`"
    )

@app.on_message(filters.text & ~filters.command & filters.incoming)
async def handle_batch_input(client: Client, message: Message):
    if not Config.PROCESSING:
        return
    
    try:
        # рдЯрд╛рд░рдЧреЗрдЯ рдЪреИрдирд▓ рдФрд░ рд╕реЛрд░реНрд╕ рд▓рд┐рдВрдХ рдкрд╛рд░реНрд╕ рдХрд░реЗрдВ
        parts = message.text.split('\n')
        if len(parts) < 2:
            return await message.reply("тЪая╕П рдЧрд▓рдд рдлреЙрд░реНрдореЗрдЯ! рдЙрджрд╛рд╣рд░рдг:\n@target_channel\nhttps://t.me/source/123")
        
        Config.TARGET_CHAT = parts[0].strip()
        source_link = parts[1].strip()
        
        # рд╕реЛрд░реНрд╕ рд▓рд┐рдВрдХ рд╕реЗ рдЪреИрдЯ рдФрд░ рдореИрд╕реЗрдЬ ID рдирд┐рдХрд╛рд▓реЗрдВ
        match = re.search(r't\.me/(?:c/)?(\d+|\w+)/(\d+)', source_link)
        if not match:
            return await message.reply("тЭМ рдЕрдорд╛рдиреНрдп рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рд▓рд┐рдВрдХ")
        
        chat_id = match.group(1)
        start_id = int(match.group(2))
        
        # рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рд╢реБрд░реВ
        progress_msg = await message.reply("тП│ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рд╢реБрд░реВ...")
        success = failed = 0
        
        for i in range(Config.EXTRACT_LIMIT):
            if not Config.PROCESSING:
                break
            
            try:
                current_id = start_id + i
                msg = await client.get_messages(chat_id, current_id)
                
                if msg and not msg.empty:
                    if await process_single_message(client, msg):
                        success += 1
                    else:
                        failed += 1
                
                # рд╣рд░ 5 рдореИрд╕реЗрдЬ рдкрд░ рдЕрдкрдбреЗрдЯ
                if (success + failed) % 5 == 0:
                    await progress_msg.edit(
                        f"тП│ рдкреНрд░реЛрдЧреНрд░реЗрд╕: {success + failed}/{Config.EXTRACT_LIMIT}\n"
                        f"тЬЕ рд╕рдлрд▓: {success}\n"
                        f"тЭМ рдлреЗрд▓: {failed}"
                    )
                
                await asyncio.sleep(1)  # рд░реЗрдЯ рд▓рд┐рдорд┐рдЯрд┐рдВрдЧ
            
            except Exception as e:
                failed += 1
                continue
        
        # рдХрдВрдкреНрд▓реАрдЯ рд░рд┐рдкреЛрд░реНрдЯ
        await progress_msg.edit(
            f"ЁЯОЙ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдкреВрд░реА!\n"
            f"тАв рдХреБрд▓ рдореИрд╕реЗрдЬ: {success + failed}\n"
            f"тАв рд╕рдлрд▓: {success}\n"
            f"тАв рдлреЗрд▓: {failed}\n"
            f"тАв рд▓рд╛рдЧреВ рдСрдлрд╕реЗрдЯ: {Config.OFFSET}"
        )
    
    finally:
        Config.PROCESSING = False
        Config.TARGET_CHAT = None

@app.on_message(filters.command("cancel"))
async def cancel_processing(client: Client, message: Message):
    Config.PROCESSING = False
    await message.reply("тЭМ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рд░рджреНрдж рдХреА рдЧрдИ")

if __name__ == "__main__":
    print("тЪб рдмреЙрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рд╣реБрдЖ!")
    app.run()
